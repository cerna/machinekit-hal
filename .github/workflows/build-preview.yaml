#####################################################################
# Description:  debian-builder-workflow.yaml
#
#               This file, 'debian-builder-workflow.yaml', implements
#               the builder/tester CI/CD workflow for Debian based
#               systems.
#
# Copyright (C) 2020       Jakub Fi≈°er <jakub DOT fiser AT eryaf DOT com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
#
######################################################################

name: Test application and publish packages (Debian linux)

on:
  push:
    branches:
    - '*'
    tags-ignore:
    - 'v*'

  pull_request:
    branches:
    - '*'

env:
  # DANGER: Changing this value will mean new Docker image name!
  #         Public Docker images in GitHub Packages cannot be deleted,
  #         every change will stay visible 'forever' in form of old packages
  ImageNameRoot: 'machinekit-hal-debian-builder-v'

jobs:
  prepareState:
    runs-on: ubuntu-latest
    outputs:
      BuildDockerImages: ${{ env.BuildDockerImage }}
      HasCloudsmithToken: ${{ steps.cloudsmith_checker.outputs.tokenPresent }}
      HasSigningKey: ${{ steps.signing_key_checker.outputs.keyPresent }}
      MainMatrix: ${{ steps.matrix_normalizer.outputs.matrix }}

    steps:
    - name: Show GitHub context as a JSON
      run: |
        echo "$GITHUB_CONTEXT"
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
    
    - name: Prepare job matrix for subsequent jobs
      id: matrix_normalizer
      run: echo "::set-output name=matrix::{\"include\":[{\"osVersionCodename\":\"jessie\",\"osVersionNumber\":8,\"architecture\":\"i386\"},{\"osVersionCodename\":\"stretch\",\"osVersionNumber\":9,\"architecture\":\"i386\"},{\"osVersionCodename\":\"buster\",\"osVersionNumber\":10,\"architecture\":\"i386\"},{\"osVersionCodename\":\"jessie\",\"osVersionNumber\":8,\"architecture\":\"amd64\"},{\"osVersionCodename\":\"stretch\",\"osVersionNumber\":9,\"architecture\":\"amd64\"},{\"osVersionCodename\":\"buster\",\"osVersionNumber\":10,\"architecture\":\"amd64\"},{\"osVersionCodename\":\"jessie\",\"osVersionNumber\":8,\"architecture\":\"armhf\"},{\"osVersionCodename\":\"stretch\",\"osVersionNumber\":9,\"architecture\":\"armhf\"},{\"osVersionCodename\":\"buster\",\"osVersionNumber\":10,\"architecture\":\"armhf\"},{\"osVersionCodename\":\"stretch\",\"osVersionNumber\":9,\"architecture\":\"arm64\"},{\"osVersionCodename\":\"buster\",\"osVersionNumber\":10,\"architecture\":\"arm64\"}]}"

      # Fetch the whole history here as there is no way of knowing how many commits there were in push event
    - name: Deep clone Machinekit-HAL repository
      uses: actions/checkout@v2
      with:
        ref: '${{ github.event.ref }}'
        fetch-depth: '0'
        path: 'machinekit-hal'
    
    - name: Get SHAs needed for file changes checking
      id: event_normalizer 
      run: |
        if [ "${{ github.event_name }}" == "push" ]; then
          echo "::set-output name=before::${{ github.event.before }}"
          echo "::set-output name=after::${{ github.sha }}"
          exit 0
        fi
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "::set-output name=before::${{ github.event.base.sha }}"
          echo "::set-output name=after::${{ github.sha }}"
          exit 1
        fi
        printf "Disallowed event type\n"
        exit 1

      # Force-push checking should be done better, this implementation doesn't
      # take into account changes in the force push: How to get from Github API
      # the last SHA before push?
    - name: Check if Docker images related files were changed in this event
      run: |
        if [[ ${BEFORE} =~ ^0+$ ]]; then
          printf "This is new branch\n"
          exit 0
        fi
        if ! git rev-parse -q --verify "$BEFORE^{commit}" > /dev/null; then
          printf "Commit $BEFORE does not exists, this is probably force push\n"
          exit 0
        fi
        CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r ${BEFORE} ${AFTER})
        printf "Found changed files in this event:\n$CHANGED_FILES\n====\n"
        while IFS= read -r line; do
          if [[ $line =~ $DOCKER_REGEX ]]; then 
            printf "Found file $line matching the regular expression for Debian builder files\n"
            echo "::set-env name=BuildDockerImage::true"
            exit 0
          fi
        done <<< "$CHANGED_FILES"
        printf "No changes in Debian builder files were found, not going to force rebuild\n"
      env:
        BEFORE: ${{ steps.event_normalizer.outputs.before }}
        AFTER: ${{ steps.event_normalizer.outputs.after }}
        DOCKER_REGEX: '^scripts/(((containers/){0,1}buildsystem/debian/.{1,})|build_debian_docker_image)$'
      working-directory: ./machinekit-hal

    - name: Build a GraphQL query for questioning Github Packages Docker registry
      if: env.BuildDockerImage != 'true'
      run: |
        echo "
          query: 
            'query getDockerImages(\$owner: String!, \$repository: String!) {
              repository(owner: \$owner, name: \$repository) {
                 registryPackages(packageType: DOCKER, publicOnly: true, first: 100) {
                  nodes {
                    name
                    version(version: \"latest\") {
                      sha256
                    }
                  }
                }
              }
            }'
          variables:
            owner:
              type: arg
              name: owner
            repository:
              type: arg
              name: repository
        " > DockerImagesInGithubPackagesQuery.yaml

    - name: Query GitHub Packages registry for Docker images
      if: env.BuildDockerImage != 'true'
      uses: helaili/github-graphql-action@2.0.1
      id: get_debian_builders_data
      with:
        query: DockerImagesInGithubPackagesQuery.yaml
        outputFile: DockerImagesInGithubPackagesResponse.json
        logLevel: debug
        owner: ${{ github.event.repository.owner.name }}
        repository: ${{ github.event.repository.name }}
        inquiry: 'is:public ${{ env.ImageNameRoot }}'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Check if all Debian builder Docker images are present
      if: env.BuildDockerImage != 'true'
      run: |
        test_array=(${IMAGE_SUFFIX_ARRAY})
        MISSING=0
        for i in ${test_array[@]}
        do
          IMAGENAME="${IMAGE_NAME_ROOT}$i"
          IMAGESHA=$(jq -r --arg IMAGENAME "$IMAGENAME" '.data.repository.registryPackages.nodes[] | select(.name == $IMAGENAME).version.sha256' ${INPUT_JSON_FILE})
          if [ -z "$IMAGESHA" ]; then
            printf "Docker image $IMAGENAME:latest does not exist in registry docker.pkg.github.com/$REPOSITORY_FULL\n"
            ((MISSING=MISSING+1))
          fi
        done
        if [ $MISSING -gt 0 ]; then
          printf "Registry is missing $MISSING Docker image(s)\n"
          echo ::set-env name=BuildDockerImage::true
        else
          printf "All images present in registry, no missing packages waiting to be build\n"  
        fi
      env:
        IMAGE_SUFFIX_ARRAY: 'amd64_8 amd64_9 amd64_10 arm64_9 arm64_10 i386_8 i386_9 i386_10 armhf_8 armhf_9 armhf_10'
        IMAGE_NAME_ROOT: ${{ env.ImageNameRoot }}
        REPOSITORY_FULL: ${{ github.repository }}
        INPUT_JSON_FILE: 'DockerImagesInGithubPackagesResponse.json'
    
    - name: Check if Cloudsmith authorization token is present in GitHub secrets storage
      id: cloudsmith_checker
      run: |
        if ! [ -z "$CLOUDSMITH_TOKEN" ]; then
          printf "Cloudsmith.io authorization token found in GitHub secret storage, will try to upload\n"
          echo "::set-output name=tokenPresent::true"
        else
           printf "Cloudsmith.io authorization token not found in GitHub secret storage\n"
          echo "::set-output name=tokenPresent::false"
        fi
      env:
        CLOUDSMITH_TOKEN: ${{ secrets.CLOUDSMITH_TOKEN }}

    - name: Check if signing key is present in GitHub secrets storage
      id: signing_key_checker
      run: |
        if ! [ -z "$SIGNING_KEY" ]; then
          printf "Signing key found in GitHub secret storage, will try to sign\n"
          echo "::set-output name=keyPresent::true"
        else
           printf "Signing key not found in GitHub secret storage\n"
          echo "::set-output name=keyPresent::false"
        fi
      env:
        SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
  
  buildMachinekitHALDebianPackages:
    runs-on: ubuntu-latest
    needs: prepareState
    strategy:
      matrix: ${{ fromJson(needs.prepareState.outputs.MainMatrix) }}
      fail-fast: false
    
    steps:
      -run: |
        printf "${{ fromJson(needs.prepareState.outputs.MainMatrix.*.osVersionNumber) }}\n"
        printf "${{ fromJson(needs.prepareState.outputs.MainMatrix.include.*.osVersionNumber) }}\n"
      - name: Clone Machinekit-HAL repository
        uses: actions/checkout@v2
        with:
          ref: '${{ github.event.ref }}'
          path: 'build/machinekit-hal'

        # Docker image temp/temp is temporary until the build script is changed accordingly
      - name: Prepare the Docker image
        run: |
          if [ "${{ needs.prepareState.outputs.BuildDockerImages }}" == "true" ]; then
            scripts/build_debian_docker_image -r temp -i temp -t ${TAG}
            docker tag temp/temp:${TAG} ${IMAGE_NAME_BASE}${TAG}:latest
            exit 0
          fi
          printf "${{ env.GITHUB_TOKEN}}" | docker login docker.pkg.github.com -u $GITHUB_OWNER --password-stdin
          docker pull ${IMAGE_NAME_BASE}${TAG}:latest
          docker tag ${IMAGE_NAME_BASE}${TAG}:latest temp/temp:${TAG}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IMAGE_NAME_BASE: 'docker.pkg.github.com/${{ github.repository }}/${{ env.ImageNameRoot }}'
          GITHUB_OWNER: ${{ github.event.repository.owner.name }}
          TAG: '${{ matrix.architecture }}_${{ matrix.osVersionNumber }}'
        working-directory: ./build/machinekit-hal

        # Docker image temp/temp is temporary until the build script is changed accordingly
      - name: Build Machinekit-HAL Debian package for ${{ matrix.osVersion}}, ${{ matrix.architecture }}
        run: |
          scripts/build_docker -i $DOCKER_IMAGE -t $TAG -c deb -n
        env:
          TAG: '${{ matrix.architecture }}_${{ matrix.osVersionNumber }}'
          DOCKER_IMAGE: 'temp/temp'
        working-directory: ./build/machinekit-hal  

      - name: Sign the package with Machinekit Builder Signer Key
        run: echo "Not implemented yet"

      - name: Prepare build artifact for upload
        run: |
          mkdir machinekit-hal-debian
          find ./build -depth -not \( -path "." -or -path "./build" -or -path "./build/machinekit-hal" -or -path "./build/machinekit-hal/*" \) -print0 | xargs -0 -t -I '{}' cp -v '{}' ./machinekit-hal-debian

      - name: Upload built package for Debian ${{ matrix.osVersion}}, ${{ matrix.architecture }} as an artifact
        uses: actions/upload-artifact@v1
        with:
          name: machinekit-hal-debian-${{ matrix.architecture }}-${{ matrix.osVersion }}-${{ github.sha}}
          path: machinekit-hal-debian

  testMachinekitHALBuild:
    runs-on: ubuntu-latest
    needs: prepareState
    strategy:
      matrix:
        osVersion: ${{ fromJson(needs.prepareState.outputs.MainMatrix.*.osVersionNumber) }}
      fail-fast: false

    steps:
      - name: Clone Machinekit-HAL repository
        uses: actions/checkout@v2
        with:
          ref: '${{ github.event.ref }}'
          path: 'build/machinekit-hal'

      - name: Check on which architecture the workflow is running on
        id: runtime_architecture
        run: |
          ARCHITECTURE=$(uname --machine)
          RENAMEARCH=""
          case "$ARCHITECTURE" in
            "x86_64")
              RENAMEARCH="amd64"
              ;;
            *)
              printf "Architecture $ARCHITECTURE is unrecognized\n"
              exit 1
              ;;
          esac
          printf "This job is going to use $RENAMEARCH as an achitecture tag\n"
          echo "::set-output name=architecture::$RENAMEARCH"

      - name: Prepare Machinekit-HAL Debian builder Docker image suffix
        id: tag_normalizer
        run: |
          VER=""
          case "${{ matrix.osVersion }}" in
            "jessie")
              VER="8"
              ;;
            "stretch")
              VER="9"
              ;;
            "buster")
              VER="10"
              ;;
            "bullseye")
              VER="11"
              ;;
          esac
          TAG="${ARCHITECTURE}_${VER}"
          printf "Tag for this job is $TAG\n"
          echo "::set-output name=tag::$TAG"
        env:
          ARCHITECTURE: ${{ steps.runtime_architecture.outputs.architecture }}

        # Docker image temp/temp is temporary until the build script is changed accordingly
      - name: Prepare the Docker image
        run: |
          if [ "${{ needs.prepareState.outputs.BuildDockerImages }}" == "true" ]; then
            scripts/build_debian_docker_image -r temp -i temp -t ${TAG}
            docker tag temp/temp:${TAG} ${IMAGE_NAME_BASE}${TAG}:latest
            exit 0
          fi
          printf "${{ env.GITHUB_TOKEN}}" | docker login docker.pkg.github.com -u $GITHUB_OWNER --password-stdin
          docker pull ${IMAGE_NAME_BASE}${TAG}:latest
          docker tag ${IMAGE_NAME_BASE}${TAG}:latest temp/temp:${TAG}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IMAGE_NAME_BASE: 'docker.pkg.github.com/${{ github.repository }}/${{ env.ImageNameRoot }}'
          GITHUB_OWNER: ${{ github.event.repository.owner.name }}
          TAG: ${{ steps.tag_normalizer.outputs.tag }}
        working-directory: ./build/machinekit-hal

        # Docker image temp/temp is temporary until the build script is changed accordingly
      - name: Execute Runtests
        run: |
          scripts/build_docker -i $DOCKER_IMAGE -t $TAG -c test
        env:
          TAG: ${{ steps.tag_normalizer.outputs.tag }}
          DOCKER_IMAGE: 'temp/temp'
        working-directory: ./build/machinekit-hal 

      - name: Execute CMOCKA UNIT tests
        run: printf "Not yet implemented\n"

      - name: Execute Python nosetests
        run: printf "Not yet implemented\n"

  # This has a chance to cause problems when developing multiple branches simultaneously
  # all or some of which use different builder configuration, one way how to solve it is 
  # to use different tags for different branches, but with the current state with Github
  # Packages when one cannot delete public packages (there is discussion on github.community
  # it will be) and fact that Github doesn't say how much space is available for Open Source
  # repository, I am going to let it be limited to :latest for now
  buildContainerImagesForUpload:
    runs-on: ubuntu-latest
    if: needs.prepareState.outputs.BuildDockerImages == 'true' && github.event_name == 'push'
    needs: [buildMachinekitHALDebianPackages, testMachinekitHALBuild, prepareState]
    strategy:
      matrix:
        osVersion: ['jessie', 'stretch', 'buster']
        architecture: ['i386', 'amd64', 'armhf', 'arm64']
        exclude:
          - osVersion: 'jessie'
            architecture: 'arm64'
      fail-fast: true

    steps:
      - name: Clone Machinekit-HAL repository
        uses: actions/checkout@v2
        with:
          ref: '${{ github.event.ref }}'
          path: 'build/machinekit-hal'
      
      - name: Prepare Machinekit-HAL Debian builder Docker image suffix
        id: tag_normalizer
        run: |
          VER=""
          case "${{ matrix.osVersion }}" in
            "jessie")
              VER="8"
              ;;
            "stretch")
              VER="9"
              ;;
            "buster")
              VER="10"
              ;;
            "bullseye")
              VER="11"
              ;;
          esac
          TAG="${{ matrix.architecture }}_$VER"
          printf "Tag for this job is $TAG\n"
          echo "::set-output name=tag::${TAG}"

        # Docker image temp/temp is temporary until the build script is changed accordingly
      - name: Build the docker image for ${{ matrix.osVersion}}, ${{ matrix.architecture }} Builder
        run: |
          scripts/build_debian_docker_image -r temp -i temp -t ${TAG}
          docker tag temp/temp:${TAG} ${IMAGE_NAME_BASE}${TAG}:latest
          exit 0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IMAGE_NAME_BASE: 'docker.pkg.github.com/${{ github.repository }}/${{ env.ImageNameRoot }}'
          TAG: ${{ steps.tag_normalizer.outputs.tag }}
        working-directory: ./build/machinekit-hal

      - name: Upload the container image to repository's Github Packages registry
        run: |
          printf "${{ env.GITHUB_TOKEN}}" | docker login docker.pkg.github.com -u $GITHUB_OWNER --password-stdin
          docker push ${IMAGE_NAME_BASE}${TAG}:latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_OWNER: ${{ github.event.repository.owner.name }}
          IMAGE_NAME_BASE: 'docker.pkg.github.com/${{ github.repository }}/${{ env.ImageNameRoot }}'
          TAG: ${{ steps.tag_normalizer.outputs.tag }}

  uploadMachinekitHALDebianPackages:
    runs-on: ubuntu-latest
    if: needs.prepareState.outputs.HasCloudsmithToken == 'true'
    needs: [buildMachinekitHALDebianPackages, testMachinekitHALBuild, prepareState]
    
    steps:
      - name: Download built artifacts from GitHub storage
        run: printf "Not yet implemented\n"

      - name: Upload the Debian packages to Cloudsmith hosting service
        run: printf "Not yet implemented\n"